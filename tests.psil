;;; Fichier des tests.              -*- mode: lisp-data; coding: utf-8 -*-

(let 5)

(let
    (f
        (Int -> (Bool -> (Int -> (Tuple Int Int))))
        (fun x y z (if y
            (tuple (call * x z) (call + x z))
            (tuple (call (call / x) z) (call (call - x) z)))))
      f)

(let (x 5)
     (y Int 10)
     (not (x Bool) Bool (if x false true))
     (true (call = 0 0))
     (false (call = 0 1))
     (and (x Bool) (y Bool) Bool
        (hastype (if x (hastype (if y true false) Bool) false) Bool))
    (hastype (if
        (call and
            (call <= (hastype (fetch (tuple x y) (x y) (call * x y)) Int) 42)
            (call not (call (call = x) y)))
               true false)
           Bool))

(let (x (tuple double * 7))
    (double ((Int -> (Int -> Int)) -> (Int -> Int)) (fun op x (call op x x)))
  (call - (hastype (fetch x (double op num) (call double op num)) Int) 7))

(let (exp (Tuple Int Bool) (if cond (tuple 1 true)
        (fetch (tuple + 15 12) (f x y) (call f x y))))
      (not (x Bool) Bool (if x false true))
      (false (call (call = 0) 1))
      (true (call = 0 0))
      (or (Bool Bool -> Bool) (fun x y (if x true (if y true false))))
      (cond (call or (call not true) (call not false)))
      exp)
